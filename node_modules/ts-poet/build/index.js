"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Import_1 = require("./Import");
const Code_1 = require("./Code");
const Node_1 = require("./Node");
const ConditionalOutput_1 = require("./ConditionalOutput");
var Code_2 = require("./Code");
exports.Code = Code_2.Code;
var Import_2 = require("./Import");
exports.Import = Import_2.Import;
/** A template literal to format code and auto-organize imports. */
function code(literals, ...placeholders) {
    return new Code_1.Code(literals, placeholders);
}
exports.code = code;
function arrayOf(...elements) {
    return new (class extends Node_1.Node {
        get childNodes() {
            return elements;
        }
        toCodeString() {
            return '[' + elements.map(Code_1.deepGenerate).join(', ') + ']';
        }
    })();
}
exports.arrayOf = arrayOf;
function joinCode(chunks, opts = {}) {
    const { on = '', trim = true } = opts;
    const literals = [''];
    for (let i = 0; i < chunks.length - 1; i++) {
        literals.push(on);
    }
    literals.push('');
    if (trim) {
        chunks.forEach((c) => (c.trim = true));
    }
    return new Code_1.Code(literals, chunks);
}
exports.joinCode = joinCode;
/** Creates an import that will be auto-imported at the top of the output file. */
function imp(spec, opts = {}) {
    const sym = Import_1.Import.from(spec);
    if (opts && opts.definedIn) {
        sym.definedIn = opts.definedIn;
    }
    return sym;
}
exports.imp = imp;
/** Defines `symbol` as being locally defined in the file, to avoid import collisions. */
function def(symbol) {
    return new Code_1.Def(symbol);
}
exports.def = def;
/** Creates a conditionally-output code snippet. */
function conditionalOutput(usageSite, declarationSite) {
    return new ConditionalOutput_1.ConditionalOutput(usageSite, declarationSite);
}
exports.conditionalOutput = conditionalOutput;
